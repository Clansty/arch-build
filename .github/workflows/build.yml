name: BUILD

on:
  push:
  schedule:
    - cron:  '1 */8 * * *'
  workflow_dispatch:

jobs:
  # 读取 PKGLIST 文件并转换成 JSON 给下一步读取
  pkglist:
    runs-on: ubuntu-latest
    outputs:
      data: ${{ steps.yaml2json.outputs.data }}
    steps:
      - uses: actions/checkout@v1
      - uses: fabasoad/yaml-json-xml-converter-action@main
        id: yaml2json
        with:
          path: 'pkglist.yaml'
          from: 'yaml'
          to: 'json'

  buildAUR-x86_64:
    runs-on: ubuntu-latest
    needs:
     - pkglist
    strategy:
      matrix:
        repos: ${{ fromJSON(needs.pkglist.outputs.data).x86_64 }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v1

      - name: 检查包是否已存在
        id: is-needed
        uses: ./check-is-needed
        with: 
          package-name: ${{ matrix.repos }}
          arch: x86_64

      - run: echo ${{ steps.is-needed.outputs.arch == 'any' }}

      - name: 使用 yay 构建包
        id: build
        uses: Clansty/build-aur-action@master
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        with:
          repo-name: ${{ matrix.repos }}

      - name: 同步 docker 内外目录
        # $PWD 在 docker 中被映射到 /github/workspace
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        run: |
          sudo mkdir /github
          sudo ln -s $PWD /github/workspace

      - name: 复制文件以便上传
        # rclone 没法指定多个文件
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        run: |
          mkdir rclone-upload
          cp ${{ steps.build.outputs.filelist }} rclone-upload/

      - name: 把包上传到 OneDrive - x86_64
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        uses: wei/rclone@v1.1.1
        env:
          RCLONE_CONF: ${{ secrets.RCLONE_CONF }}
        with:
          # 21cn:repo-ng
          args: copy rclone-upload/ ${{ secrets.REPO_PATH }}/x86_64/

      # 以下操作对于包的架构为 any 的情况
      - name: 把包上传到 OneDrive - i686
        if: ${{ steps.is-needed.outputs.arch == 'any' && steps.is-needed.outputs.is-needed == 'true' }}
        uses: wei/rclone@v1.1.1
        env:
          RCLONE_CONF: ${{ secrets.RCLONE_CONF }}
        with:
          # 21cn:repo-ng
          args: copy rclone-upload/ ${{ secrets.REPO_PATH }}/i686/
      - name: 把包上传到 OneDrive - aarch64
        if: ${{ steps.is-needed.outputs.arch == 'any' && steps.is-needed.outputs.is-needed == 'true' }}
        uses: wei/rclone@v1.1.1
        env:
          RCLONE_CONF: ${{ secrets.RCLONE_CONF }}
        with:
          # 21cn:repo-ng
          args: copy rclone-upload/ ${{ secrets.REPO_PATH }}/aarch64/
      - name: 把包上传到 OneDrive - loongarch64
        if: ${{ steps.is-needed.outputs.arch == 'any' && steps.is-needed.outputs.is-needed == 'true' }}
        uses: wei/rclone@v1.1.1
        env:
          RCLONE_CONF: ${{ secrets.RCLONE_CONF }}
        with:
          # 21cn:repo-ng
          args: copy rclone-upload/ ${{ secrets.REPO_PATH }}/loongarch64/

      - name: 提交元信息到 Azure Blob 存储
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        uses: ./
        with: 
          azure-blob-storage-connection-string: ${{ secrets.AZURE_BLOB_STORAGE_CONNECTION_STRING }}
          azure-blob-storage-container: repo
          arch: x86_64
          package-files: ${{ steps.build.outputs.filelist }}

      - name: 提交其它架构元信息到 Azure Blob 存储
        if: ${{ steps.is-needed.outputs.arch == 'any' && steps.is-needed.outputs.is-needed == 'true' }}
        uses: ./
        with: 
          azure-blob-storage-connection-string: ${{ secrets.AZURE_BLOB_STORAGE_CONNECTION_STRING }}
          azure-blob-storage-container: repo
          arch: i686 aarch64 loongarch64
          package-files: ${{ steps.build.outputs.filelist }}

  # 编译安装的包不能这么搞
  # buildAUR-aarch64:
  #   strategy:
  #     matrix:
  #       repos:
  #         - electron-bin
  #         - electron12-bin
  #         - electron13-bin
  #         - visual-studio-code-bin
  #         - yay-bin
  #         - webstorm
  #         - intellij-idea-ultimate-edition
  #         - pycharm-professional
  #         - visual-paradigm-community

  #     fail-fast: false

  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: download PKGBUILD
  #       run: wget https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=${{ matrix.repos }} -O PKGBUILD

  #     - name: determine if this package need to be built
  #       id: isNeed
  #       run: |
  #         source PKGBUILD
  #         echo ::set-output name=pkgname::$pkgname
  #         echo ::set-output name=pkgver::$pkgver
  #         echo ::set-output name=pkgrel::$pkgrel
  #         fileName=$pkgname-$pkgver-$pkgrel-aarch64.pkg.tar.zst
  #         echo $fileName
  #         echo ::set-output name=isNeed::$(curl -u ${{ secrets.REPO_BUILDER_AUTH }} ${{ secrets.REPO_BUILDER_API }}/api/exists/$fileName)

  #     - uses: Clansty/build-aur-action@aarch64
  #       if: ${{ steps.isNeed.outputs.isNeed == 'false' }}
  #       with:
  #         repo-name: ${{ matrix.repos }}

  #     #- name: make it fail if the package cannot be found
  #       #run: ls *-*.pkg.tar.*
  #       #if: ${{ steps.isNeed.outputs.isNeed == 'false' }}

  #     - id: pkgname
  #       if: ${{ steps.isNeed.outputs.isNeed == 'false' }}
  #       working-directory: ${{ matrix.repos }}
  #       # 防止一个 pkgbase 两个包引起问题
  #       run: echo ::set-output name=pkgname::$(ls ${{ steps.isNeed.outputs.pkgname }}-${{ steps.isNeed.outputs.pkgver }}-${{ steps.isNeed.outputs.pkgrel }}-*.pkg.tar.*)

  #     - name: determine if this package need to be uploaded
  #       if: ${{ steps.isNeed.outputs.isNeed == 'false' }}
  #       id: isNeed2
  #       run: echo ::set-output name=isNeed::$(curl -u ${{ secrets.REPO_BUILDER_AUTH }} ${{ secrets.REPO_BUILDER_API }}/api/exists/${{ steps.pkgname.outputs.pkgname }})

  #     - name: deploy file
  #       if: ${{ steps.isNeed.outputs.isNeed == 'false' && steps.isNeed2.outputs.isNeed == 'false' }}
  #       uses: wlixcc/SFTP-Deploy-Action@v1.0
  #       with:
  #         username: 'repobuilder'
  #         server: ${{ secrets.REPO_BUILDER_HOST }}
  #         ssh_private_key: ${{ secrets.REPO_BUILDER_PRIVKEY }}
  #         local_path: ${{ matrix.repos }}/${{ steps.pkgname.outputs.pkgname }}
  #         remote_path: '/home/repobuilder/repo-builder/tmp'

  #     - run: curl -u ${{ secrets.REPO_BUILDER_AUTH }} ${{ secrets.REPO_BUILDER_API }}/api/add-package/${{ steps.pkgname.outputs.pkgname }}
  #       if: ${{ steps.isNeed.outputs.isNeed == 'false' && steps.isNeed2.outputs.isNeed == 'false' }}

  #     - run: curl -u ${{ secrets.REPO_BUILDER_AUTH }} ${{ secrets.REPO_BUILDER_API }}/api/queue
