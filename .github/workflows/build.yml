name: BUILD

on:
  push:
  schedule:
    - cron:  '1 */8 * * *'
  workflow_dispatch:

jobs:
  # 读取 PKGLIST 文件并转换成 JSON 给下一步读取
  pkglist:
    runs-on: ubuntu-latest
    outputs:
      data: ${{ steps.parse.outputs.pkglist }}
    steps:
      - uses: actions/checkout@v1
      - uses: fabasoad/yaml-json-xml-converter-action@main
        id: yaml2json
        with:
          path: 'pkglist.yaml'
          from: 'yaml'
          to: 'json'
      - uses: ./parse-pkglist
        id: parse
        with:
          pkglist: ${{ steps.yaml2json.outputs.data }}

  buildAUR-pack:
    runs-on: ubuntu-latest
    needs:
      - pkglist
    strategy:
      matrix:
        include: ${{ fromJSON(needs.pkglist.outputs.data).builds-on-x86_64 }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v1

      - name: 检查包是否已存在
        id: is-needed
        uses: ./check-is-needed
        with: 
          package-name: ${{ matrix.repo }}
          arch: ${{ matrix.arch }}
          container: repo

      - name: 使用 yay 构建包
        id: build
        uses: Clansty/build-aur-action@main
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        with:
          repo-name: ${{ matrix.repo }}
          arch: ${{ matrix.arch }}

      - name: 同步 docker 内外目录
        # $PWD 在 docker 中被映射到 /github/workspace
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        run: |
          sudo mkdir /github
          sudo ln -s $PWD /github/workspace

      - name: 复制文件以便上传
        # rclone 没法指定多个文件
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        run: |
          mkdir rclone-upload
          cp ${{ steps.build.outputs.filelist }} rclone-upload/

      - uses: NiceLabs/rclone-action@master
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        with:
          github-token: ${{ secrets.SECRET_TOKEN }}
          config: ${{ secrets.RCLONE_CONF }}
          config-secret-name: RCLONE_CONF

      - name: 把包上传到 OneDrive
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        run: rclone copy rclone-upload/ ${{ secrets.REPO_PATH }}/

      - name: 提交元信息到 Azure Blob 存储
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        uses: ./
        with: 
          azure-blob-storage-connection-string: ${{ secrets.AZURE_BLOB_STORAGE_CONNECTION_STRING }}
          azure-blob-storage-container: repo
          arch: ${{ steps.is-needed.outputs.arch }}
          package-files: ${{ steps.build.outputs.filelist }}

  buildAUR-i686:
    runs-on: ubuntu-latest
    needs:
      - pkglist
    strategy:
      matrix:
        repo: ${{ fromJSON(needs.pkglist.outputs.data).builds-on-i686 }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v1

      - name: 检查包是否已存在
        id: is-needed
        uses: ./check-is-needed
        with: 
          package-name: ${{ matrix.repo }}
          arch: i686
          container: repo

      - name: 使用 Docker 构建包
        id: build
        uses: Clansty/build-aur-action32@main
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        with:
          repo-name: ${{ matrix.repo }}
          arch: i686

      - name: 同步 docker 内外目录
        # $PWD 在 docker 中被映射到 /github/workspace
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        run: |
          sudo mkdir /github
          sudo ln -s $PWD /github/workspace

      - name: 复制文件以便上传
        # rclone 没法指定多个文件
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        run: |
          mkdir rclone-upload
          cp ${{ steps.build.outputs.filelist }} rclone-upload/

      - uses: NiceLabs/rclone-action@master
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        with:
          github-token: ${{ secrets.SECRET_TOKEN }}
          config: ${{ secrets.RCLONE_CONF }}
          config-secret-name: RCLONE_CONF

      - name: 把包上传到 OneDrive
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        run: rclone copy rclone-upload/ ${{ secrets.REPO_PATH }}/

      - name: 提交元信息到 Azure Blob 存储
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        uses: ./
        with: 
          azure-blob-storage-connection-string: ${{ secrets.AZURE_BLOB_STORAGE_CONNECTION_STRING }}
          azure-blob-storage-container: repo
          arch: ${{ steps.is-needed.outputs.arch }}
          package-files: ${{ steps.build.outputs.filelist }}

  buildAUR-loongarch64:
    runs-on: ubuntu-latest
    needs:
      - pkglist
    strategy:
      matrix:
        repo: ${{ fromJSON(needs.pkglist.outputs.data).builds-on-loongarch64 }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v1

      - name: 检查包是否已存在
        id: is-needed
        uses: ./check-is-needed
        with: 
          package-name: ${{ matrix.repo }}
          arch: loongarch64
          container: repo

      - name: 构建包
        id: build
        uses: Clansty/build-aur-action-loongarch64@main
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        with:
          repo-name: ${{ matrix.repo }}
          arch: loongarch64
          packager: Clansty <i@gao4.pw>

      - name: 同步容器内外目录
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        run: |
          sudo mkdir /home/builder
          sudo mount --bind /loongarch64-root/home/builder /home/builder
          sudo chmod 777 /loongarch64-root/home/builder

      - name: 复制文件以便上传
        # rclone 没法指定多个文件
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        run: |
          mkdir rclone-upload
          cp ${{ steps.build.outputs.filelist }} rclone-upload/

      - uses: NiceLabs/rclone-action@master
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        with:
          github-token: ${{ secrets.SECRET_TOKEN }}
          config: ${{ secrets.RCLONE_CONF }}
          config-secret-name: RCLONE_CONF

      - name: 把包上传到 OneDrive
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        run: rclone copy rclone-upload/ ${{ secrets.REPO_PATH }}/

      - name: 提交元信息到 Azure Blob 存储
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        uses: ./
        with: 
          azure-blob-storage-connection-string: ${{ secrets.AZURE_BLOB_STORAGE_CONNECTION_STRING }}
          azure-blob-storage-container: repo
          arch: ${{ steps.is-needed.outputs.arch }}
          package-files: ${{ steps.build.outputs.filelist }}

  buildAUR-qemu-aarch64:
    runs-on: ubuntu-latest
    needs:
      - pkglist
    strategy:
      matrix:
        repo: ${{ fromJSON(needs.pkglist.outputs.data).builds-on-aarch64 }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v1

      - name: 检查包是否已存在
        id: is-needed
        uses: ./check-is-needed
        with: 
          package-name: ${{ matrix.repo }}
          arch: aarch64
          container: repo

      - uses: uraimo/run-on-arch-action@v2.1.1
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        id: build
        name: 使用 docker 构建包
        with:
          arch: aarch64
          distro: archarm_latest
          githubToken: ${{ github.token }}
          dockerRunArgs: |
            --privileged
            --volume "${PWD}:/github/workspace"
          install: |
            ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
            echo '[archlinuxcn]
            SigLevel = Never
            Server = https://repo.archlinuxcn.org/aarch64' >> /etc/pacman.conf
            pacman-key --init
            pacman -Syu --noconfirm
            pacman -S --noconfirm base-devel git sudo
            useradd builder -m
            echo "builder ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
            echo 'PACKAGER="Clansty <i@gao4.pw>"
            COMPRESSZST=(zstd -19 -c -z -q --threads=0 -)' > /home/builder/.makepkg.conf
          run: |
            cd /github/workspace
            pacman -Syu --noconfirm
            if [[ ${{ matrix.repo }} != ./* ]];then
              git clone https://aur.archlinux.org/${{ matrix.repo }}.git
            fi # 否则为本地包
            cd ${{ matrix.repo }}
            source PKGBUILD
            chmod -R a+rw .
            pacman -S --noconfirm --needed --asdeps "${makedepends[@]}" "${depends[@]}"
            sudo --set-home -u builder makepkg -sfA
            echo ::set-output name=filelist::$(sudo --set-home -u builder makepkg --packagelist | xargs)

      - name: 同步 docker 内外目录
        # $PWD 在 docker 中被映射到 /github/workspace
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        run: |
          sudo mkdir /github
          sudo ln -s $PWD /github/workspace

      - name: 复制文件以便上传
        # rclone 没法指定多个文件
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        run: |
          mkdir rclone-upload
          cp ${{ steps.build.outputs.filelist }} rclone-upload/

      - uses: NiceLabs/rclone-action@master
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        with:
          github-token: ${{ secrets.SECRET_TOKEN }}
          config: ${{ secrets.RCLONE_CONF }}
          config-secret-name: RCLONE_CONF

      - name: 把包上传到 OneDrive
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        run: rclone copy rclone-upload/ ${{ secrets.REPO_PATH }}/

      - name: 提交元信息到 Azure Blob 存储
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        uses: ./
        with: 
          azure-blob-storage-connection-string: ${{ secrets.AZURE_BLOB_STORAGE_CONNECTION_STRING }}
          azure-blob-storage-container: repo
          arch: ${{ steps.is-needed.outputs.arch }}
          package-files: ${{ steps.build.outputs.filelist }}

  generate-build-info:
    runs-on: ubuntu-latest
    if: always()
    needs: 
      - buildAUR-pack
      - buildAUR-qemu-aarch64
      - buildAUR-i686
      - buildAUR-loongarch64
      - pkglist
    steps:
      - uses: actions/checkout@v1

      - name: 下载仓库数据库
        run: |
          for ARCH in 'x86_64' 'i686' 'aarch64' 'loongarch64'
          do
            mkdir pkgdb_$ARCH
            wget https://archlinux.blob.core.windows.net/repo/$ARCH/files.tar.gz -O files_$ARCH.tar.gz
            tar -xzf files_$ARCH.tar.gz -C pkgdb_$ARCH
          done
          
      - name: 解析包信息
        uses: ./generate-build-info
        with:
          pkglist: ${{ needs.pkglist.outputs.data }}
      
      - name: 压缩 JSON
        run: gzip -9 build-info.json

      - name: 上传 JSON 到 Azure Blob 存储
        run: az storage blob upload --connection-string "${{ secrets.AZURE_BLOB_STORAGE_CONNECTION_STRING }}" --container-name repo --file build-info.json.gz --name build-info.json.gz --content-cache "no-cache"
